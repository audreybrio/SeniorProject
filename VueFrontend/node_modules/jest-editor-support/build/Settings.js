"use strict";

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getSettings;

require("core-js/modules/es.regexp.constructor.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.string.search.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.parse-int.js");

require("core-js/modules/es.string.split.js");

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.date.to-string.js");

var _project_workspace = _interopRequireDefault(require("./project_workspace"));

var _Process = require("./Process");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function parseSettings(text) {
  var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var jsonPattern = new RegExp(/^[\s]*\{/gm);
  var settings = null;

  try {
    settings = JSON.parse(text);
  } catch (err) {
    // skip the non-json content, if any
    var idx = text.search(jsonPattern);

    if (idx > 0) {
      if (debug) {
        // eslint-disable-next-line no-console
        console.log("skip config output noise: ".concat(text.substring(0, idx)));
      }

      return parseSettings(text.substring(idx));
    } // eslint-disable-next-line no-console


    console.warn("failed to parse config: \n".concat(text, "\nerror: ").concat(err));
    throw err;
  }

  var jestVersionMajor = parseInt(settings.version.split('.').shift(), 10);

  if (debug) {
    // eslint-disable-next-line no-console
    console.log("found config jestVersionMajor=".concat(jestVersionMajor));
  }

  return {
    jestVersionMajor: jestVersionMajor,
    configs: Array.isArray(settings.configs) ? settings.configs : [settings.config]
  };
}

function getSettings(workspace, options) {
  return new Promise(function (resolve, reject) {
    var _createProcess = options && options.createProcess || _Process.createProcess;

    var getConfigProcess = _createProcess(workspace, ['--showConfig']);

    var configString = '';
    getConfigProcess.stdout.on('data', function (data) {
      configString += data.toString();
    });
    var rejected = false;
    getConfigProcess.stderr.on('data', function (data) {
      rejected = true;
      reject(data.toString());
    });
    getConfigProcess.on('close', function () {
      if (!rejected) {
        try {
          resolve(parseSettings(configString, workspace.debug));
        } catch (err) {
          reject(err);
        }
      }
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJwYXJzZVNldHRpbmdzIiwidGV4dCIsImRlYnVnIiwianNvblBhdHRlcm4iLCJSZWdFeHAiLCJzZXR0aW5ncyIsIkpTT04iLCJwYXJzZSIsImVyciIsImlkeCIsInNlYXJjaCIsImNvbnNvbGUiLCJsb2ciLCJzdWJzdHJpbmciLCJ3YXJuIiwiamVzdFZlcnNpb25NYWpvciIsInBhcnNlSW50IiwidmVyc2lvbiIsInNwbGl0Iiwic2hpZnQiLCJjb25maWdzIiwiQXJyYXkiLCJpc0FycmF5IiwiY29uZmlnIiwiZ2V0U2V0dGluZ3MiLCJ3b3Jrc3BhY2UiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfY3JlYXRlUHJvY2VzcyIsImNyZWF0ZVByb2Nlc3MiLCJnZXRDb25maWdQcm9jZXNzIiwiY29uZmlnU3RyaW5nIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwidG9TdHJpbmciLCJyZWplY3RlZCIsInN0ZGVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBOztBQUNBOzs7O0FBWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXdCQSxTQUFTQSxhQUFULENBQXVCQyxJQUF2QixFQUE0RTtBQUFBLE1BQXZDQyxLQUF1Qyx1RUFBckIsS0FBcUI7QUFDMUUsTUFBTUMsV0FBVyxHQUFHLElBQUlDLE1BQUosQ0FBVyxZQUFYLENBQXBCO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLElBQWY7O0FBRUEsTUFBSTtBQUNGQSxJQUFBQSxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTixJQUFYLENBQVg7QUFDRCxHQUZELENBRUUsT0FBT08sR0FBUCxFQUFZO0FBQ1o7QUFDQSxRQUFNQyxHQUFHLEdBQUdSLElBQUksQ0FBQ1MsTUFBTCxDQUFZUCxXQUFaLENBQVo7O0FBQ0EsUUFBSU0sR0FBRyxHQUFHLENBQVYsRUFBYTtBQUNYLFVBQUlQLEtBQUosRUFBVztBQUNUO0FBQ0FTLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixxQ0FBeUNYLElBQUksQ0FBQ1ksU0FBTCxDQUFlLENBQWYsRUFBa0JKLEdBQWxCLENBQXpDO0FBQ0Q7O0FBQ0QsYUFBT1QsYUFBYSxDQUFDQyxJQUFJLENBQUNZLFNBQUwsQ0FBZUosR0FBZixDQUFELENBQXBCO0FBQ0QsS0FUVyxDQVVaOzs7QUFDQUUsSUFBQUEsT0FBTyxDQUFDRyxJQUFSLHFDQUEwQ2IsSUFBMUMsc0JBQTBETyxHQUExRDtBQUNBLFVBQU1BLEdBQU47QUFDRDs7QUFFRCxNQUFNTyxnQkFBZ0IsR0FBR0MsUUFBUSxDQUFDWCxRQUFRLENBQUNZLE9BQVQsQ0FBaUJDLEtBQWpCLENBQXVCLEdBQXZCLEVBQTRCQyxLQUE1QixFQUFELEVBQXNDLEVBQXRDLENBQWpDOztBQUNBLE1BQUlqQixLQUFKLEVBQVc7QUFDVDtBQUNBUyxJQUFBQSxPQUFPLENBQUNDLEdBQVIseUNBQTZDRyxnQkFBN0M7QUFDRDs7QUFFRCxTQUFPO0FBQ0xBLElBQUFBLGdCQUFnQixFQUFoQkEsZ0JBREs7QUFFTEssSUFBQUEsT0FBTyxFQUFFQyxLQUFLLENBQUNDLE9BQU4sQ0FBY2pCLFFBQVEsQ0FBQ2UsT0FBdkIsSUFBa0NmLFFBQVEsQ0FBQ2UsT0FBM0MsR0FBcUQsQ0FBQ2YsUUFBUSxDQUFDa0IsTUFBVjtBQUZ6RCxHQUFQO0FBSUQ7O0FBRWMsU0FBU0MsV0FBVCxDQUFxQkMsU0FBckIsRUFBa0RDLE9BQWxELEVBQTRGO0FBQ3pHLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFNQyxjQUFjLEdBQUlKLE9BQU8sSUFBSUEsT0FBTyxDQUFDSyxhQUFwQixJQUFzQ0Esc0JBQTdEOztBQUNBLFFBQU1DLGdCQUFnQixHQUFHRixjQUFjLENBQUNMLFNBQUQsRUFBWSxDQUFDLGNBQUQsQ0FBWixDQUF2Qzs7QUFFQSxRQUFJUSxZQUFZLEdBQUcsRUFBbkI7QUFDQUQsSUFBQUEsZ0JBQWdCLENBQUNFLE1BQWpCLENBQXdCQyxFQUF4QixDQUEyQixNQUEzQixFQUFtQyxVQUFDQyxJQUFELEVBQWtCO0FBQ25ESCxNQUFBQSxZQUFZLElBQUlHLElBQUksQ0FBQ0MsUUFBTCxFQUFoQjtBQUNELEtBRkQ7QUFJQSxRQUFJQyxRQUFRLEdBQUcsS0FBZjtBQUNBTixJQUFBQSxnQkFBZ0IsQ0FBQ08sTUFBakIsQ0FBd0JKLEVBQXhCLENBQTJCLE1BQTNCLEVBQW1DLFVBQUNDLElBQUQsRUFBa0I7QUFDbkRFLE1BQUFBLFFBQVEsR0FBRyxJQUFYO0FBQ0FULE1BQUFBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDQyxRQUFMLEVBQUQsQ0FBTjtBQUNELEtBSEQ7QUFLQUwsSUFBQUEsZ0JBQWdCLENBQUNHLEVBQWpCLENBQW9CLE9BQXBCLEVBQTZCLFlBQU07QUFDakMsVUFBSSxDQUFDRyxRQUFMLEVBQWU7QUFDYixZQUFJO0FBQ0ZWLFVBQUFBLE9BQU8sQ0FBQzVCLGFBQWEsQ0FBQ2lDLFlBQUQsRUFBZVIsU0FBUyxDQUFDdkIsS0FBekIsQ0FBZCxDQUFQO0FBQ0QsU0FGRCxDQUVFLE9BQU9NLEdBQVAsRUFBWTtBQUNacUIsVUFBQUEsTUFBTSxDQUFDckIsR0FBRCxDQUFOO0FBQ0Q7QUFDRjtBQUNGLEtBUkQ7QUFTRCxHQXhCTSxDQUFQO0FBeUJEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtPcHRpb25zfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBQcm9qZWN0V29ya3NwYWNlIGZyb20gJy4vcHJvamVjdF93b3Jrc3BhY2UnO1xuaW1wb3J0IHtjcmVhdGVQcm9jZXNzfSBmcm9tICcuL1Byb2Nlc3MnO1xuXG50eXBlIEdsb2IgPSBzdHJpbmc7XG5cbi8vIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgY29uZmlndXJhdGlvbiBvZiBKZXN0J3MgcHJvY2Vzcy5cbi8vIFRoZSBpbnRlcmZhY2UgYmVsb3cgY2FuIGJlIHVzZWQgdG8gc2hvdyB3aGF0IHdlIHVzZSwgYXMgY3VycmVudGx5IHRoZSB3aG9sZVxuLy8gc2V0dGluZ3Mgb2JqZWN0IHdpbGwgYmUgaW4gbWVtb3J5LlxuLy8gQXMgc29vbiBhcyB0aGUgY29kZSB3aWxsIGJlIGNvbnZlcnRlZCB0byBUeXBlU2NyaXB0LCB0aGlzIHdpbGwgYmUgcmVtb3ZlZFxuLy8gaW4gZmF2b3Igb2YgYEBqZXN0L3R5cGVzYCwgd2hpY2ggZXhwb3J0cyB0aGUgZnVsbCBjb25maWcgaW50ZXJmYWNlLlxuXG50eXBlIFByb2plY3RDb25maWd1cmF0aW9uID0ge1xuICB0ZXN0UmVnZXg6IHN0cmluZyB8IEFycmF5PHN0cmluZz4sXG4gIHRlc3RNYXRjaDogQXJyYXk8R2xvYj4sXG59O1xuXG50eXBlIEplc3RTZXR0aW5ncyA9IHtcbiAgamVzdFZlcnNpb25NYWpvcjogbnVtYmVyLFxuICBjb25maWdzOiBQcm9qZWN0Q29uZmlndXJhdGlvbltdLFxufTtcblxuZnVuY3Rpb24gcGFyc2VTZXR0aW5ncyh0ZXh0OiBzdHJpbmcsIGRlYnVnOiA/Ym9vbGVhbiA9IGZhbHNlKTogSmVzdFNldHRpbmdzIHtcbiAgY29uc3QganNvblBhdHRlcm4gPSBuZXcgUmVnRXhwKC9eW1xcc10qXFx7L2dtKTtcbiAgbGV0IHNldHRpbmdzID0gbnVsbDtcblxuICB0cnkge1xuICAgIHNldHRpbmdzID0gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gc2tpcCB0aGUgbm9uLWpzb24gY29udGVudCwgaWYgYW55XG4gICAgY29uc3QgaWR4ID0gdGV4dC5zZWFyY2goanNvblBhdHRlcm4pO1xuICAgIGlmIChpZHggPiAwKSB7XG4gICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2coYHNraXAgY29uZmlnIG91dHB1dCBub2lzZTogJHt0ZXh0LnN1YnN0cmluZygwLCBpZHgpfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlU2V0dGluZ3ModGV4dC5zdWJzdHJpbmcoaWR4KSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGBmYWlsZWQgdG8gcGFyc2UgY29uZmlnOiBcXG4ke3RleHR9XFxuZXJyb3I6ICR7ZXJyfWApO1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIGNvbnN0IGplc3RWZXJzaW9uTWFqb3IgPSBwYXJzZUludChzZXR0aW5ncy52ZXJzaW9uLnNwbGl0KCcuJykuc2hpZnQoKSwgMTApO1xuICBpZiAoZGVidWcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGBmb3VuZCBjb25maWcgamVzdFZlcnNpb25NYWpvcj0ke2plc3RWZXJzaW9uTWFqb3J9YCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGplc3RWZXJzaW9uTWFqb3IsXG4gICAgY29uZmlnczogQXJyYXkuaXNBcnJheShzZXR0aW5ncy5jb25maWdzKSA/IHNldHRpbmdzLmNvbmZpZ3MgOiBbc2V0dGluZ3MuY29uZmlnXSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2V0dGluZ3Mod29ya3NwYWNlOiBQcm9qZWN0V29ya3NwYWNlLCBvcHRpb25zPzogT3B0aW9ucyk6IFByb21pc2U8SmVzdFNldHRpbmdzPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgX2NyZWF0ZVByb2Nlc3MgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNyZWF0ZVByb2Nlc3MpIHx8IGNyZWF0ZVByb2Nlc3M7XG4gICAgY29uc3QgZ2V0Q29uZmlnUHJvY2VzcyA9IF9jcmVhdGVQcm9jZXNzKHdvcmtzcGFjZSwgWyctLXNob3dDb25maWcnXSk7XG5cbiAgICBsZXQgY29uZmlnU3RyaW5nID0gJyc7XG4gICAgZ2V0Q29uZmlnUHJvY2Vzcy5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICBjb25maWdTdHJpbmcgKz0gZGF0YS50b1N0cmluZygpO1xuICAgIH0pO1xuXG4gICAgbGV0IHJlamVjdGVkID0gZmFsc2U7XG4gICAgZ2V0Q29uZmlnUHJvY2Vzcy5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICByZWplY3RlZCA9IHRydWU7XG4gICAgICByZWplY3QoZGF0YS50b1N0cmluZygpKTtcbiAgICB9KTtcblxuICAgIGdldENvbmZpZ1Byb2Nlc3Mub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgaWYgKCFyZWplY3RlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc29sdmUocGFyc2VTZXR0aW5ncyhjb25maWdTdHJpbmcsIHdvcmtzcGFjZS5kZWJ1ZykpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==