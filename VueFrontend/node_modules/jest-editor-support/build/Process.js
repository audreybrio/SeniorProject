"use strict";

require("core-js/modules/es.array.is-array.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProcess = void 0;

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.join.js");

var _child_process = require("child_process");

var _project_workspace = _interopRequireDefault(require("./project_workspace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Spawns and returns a Jest process with specific args
 *
 * @param {string[]} args
 * @returns {ChildProcess}
 */
// eslint-disable-next-line import/prefer-default-export
var createProcess = function createProcess(workspace, args) {
  var _workspace$nodeEnv;

  var runtimeExecutable = [workspace.jestCommandLine].concat(_toConsumableArray(args)); // If a path to configuration file was defined, push it to runtimeArgs

  if (workspace.pathToConfig) {
    runtimeExecutable.push('--config');
    runtimeExecutable.push(workspace.pathToConfig);
  }

  var env = _objectSpread(_objectSpread({}, process.env), (_workspace$nodeEnv = workspace.nodeEnv) !== null && _workspace$nodeEnv !== void 0 ? _workspace$nodeEnv : {});

  var spawnOptions = {
    cwd: workspace.rootPath,
    env: env,
    shell: typeof workspace.shell === 'string' && workspace.shell ? workspace.shell : true,
    // for non-windows: run in detached mode so the process will be the group leader and any subsequent process spawned
    // within can be later killed as a group to prevent orphan processes.
    // see https://nodejs.org/api/child_process.html#child_process_options_detached
    detached: process.platform !== 'win32'
  };

  if (workspace.debug) {
    // eslint-disable-next-line no-console
    console.log("spawning process with command=".concat(runtimeExecutable.join(' ')), 'options:', spawnOptions);
  }

  return (0, _child_process.spawn)(runtimeExecutable.join(' '), [], spawnOptions);
};

exports.createProcess = createProcess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9jZXNzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVByb2Nlc3MiLCJ3b3Jrc3BhY2UiLCJhcmdzIiwicnVudGltZUV4ZWN1dGFibGUiLCJqZXN0Q29tbWFuZExpbmUiLCJwYXRoVG9Db25maWciLCJwdXNoIiwiZW52IiwicHJvY2VzcyIsIm5vZGVFbnYiLCJzcGF3bk9wdGlvbnMiLCJjd2QiLCJyb290UGF0aCIsInNoZWxsIiwiZGV0YWNoZWQiLCJwbGF0Zm9ybSIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUEsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDQyxTQUFELEVBQThCQyxJQUE5QixFQUFvRTtBQUFBOztBQUMvRixNQUFNQyxpQkFBaUIsSUFBSUYsU0FBUyxDQUFDRyxlQUFkLDRCQUFrQ0YsSUFBbEMsRUFBdkIsQ0FEK0YsQ0FHL0Y7O0FBQ0EsTUFBSUQsU0FBUyxDQUFDSSxZQUFkLEVBQTRCO0FBQzFCRixJQUFBQSxpQkFBaUIsQ0FBQ0csSUFBbEIsQ0FBdUIsVUFBdkI7QUFDQUgsSUFBQUEsaUJBQWlCLENBQUNHLElBQWxCLENBQXVCTCxTQUFTLENBQUNJLFlBQWpDO0FBQ0Q7O0FBRUQsTUFBTUUsR0FBRyxtQ0FBT0MsT0FBTyxDQUFDRCxHQUFmLHlCQUF3Qk4sU0FBUyxDQUFDUSxPQUFsQyxtRUFBNkMsRUFBN0MsQ0FBVDs7QUFFQSxNQUFNQyxZQUFZLEdBQUc7QUFDbkJDLElBQUFBLEdBQUcsRUFBRVYsU0FBUyxDQUFDVyxRQURJO0FBRW5CTCxJQUFBQSxHQUFHLEVBQUhBLEdBRm1CO0FBR25CTSxJQUFBQSxLQUFLLEVBQUUsT0FBT1osU0FBUyxDQUFDWSxLQUFqQixLQUEyQixRQUEzQixJQUF1Q1osU0FBUyxDQUFDWSxLQUFqRCxHQUF5RFosU0FBUyxDQUFDWSxLQUFuRSxHQUEyRSxJQUgvRDtBQUluQjtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsUUFBUSxFQUFFTixPQUFPLENBQUNPLFFBQVIsS0FBcUI7QUFQWixHQUFyQjs7QUFVQSxNQUFJZCxTQUFTLENBQUNlLEtBQWQsRUFBcUI7QUFDbkI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLHlDQUE2Q2YsaUJBQWlCLENBQUNnQixJQUFsQixDQUF1QixHQUF2QixDQUE3QyxHQUE0RSxVQUE1RSxFQUF3RlQsWUFBeEY7QUFDRDs7QUFFRCxTQUFPLDBCQUFNUCxpQkFBaUIsQ0FBQ2dCLElBQWxCLENBQXVCLEdBQXZCLENBQU4sRUFBbUMsRUFBbkMsRUFBdUNULFlBQXZDLENBQVA7QUFDRCxDQTNCTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge0NoaWxkUHJvY2Vzcywgc3Bhd259IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IFByb2plY3RXb3Jrc3BhY2UgZnJvbSAnLi9wcm9qZWN0X3dvcmtzcGFjZSc7XG5cbi8qKlxuICogU3Bhd25zIGFuZCByZXR1cm5zIGEgSmVzdCBwcm9jZXNzIHdpdGggc3BlY2lmaWMgYXJnc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFyZ3NcbiAqIEByZXR1cm5zIHtDaGlsZFByb2Nlc3N9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgY29uc3QgY3JlYXRlUHJvY2VzcyA9ICh3b3Jrc3BhY2U6IFByb2plY3RXb3Jrc3BhY2UsIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBDaGlsZFByb2Nlc3MgPT4ge1xuICBjb25zdCBydW50aW1lRXhlY3V0YWJsZSA9IFt3b3Jrc3BhY2UuamVzdENvbW1hbmRMaW5lLCAuLi5hcmdzXTtcblxuICAvLyBJZiBhIHBhdGggdG8gY29uZmlndXJhdGlvbiBmaWxlIHdhcyBkZWZpbmVkLCBwdXNoIGl0IHRvIHJ1bnRpbWVBcmdzXG4gIGlmICh3b3Jrc3BhY2UucGF0aFRvQ29uZmlnKSB7XG4gICAgcnVudGltZUV4ZWN1dGFibGUucHVzaCgnLS1jb25maWcnKTtcbiAgICBydW50aW1lRXhlY3V0YWJsZS5wdXNoKHdvcmtzcGFjZS5wYXRoVG9Db25maWcpO1xuICB9XG5cbiAgY29uc3QgZW52ID0gey4uLnByb2Nlc3MuZW52LCAuLi4od29ya3NwYWNlLm5vZGVFbnYgPz8ge30pfTtcblxuICBjb25zdCBzcGF3bk9wdGlvbnMgPSB7XG4gICAgY3dkOiB3b3Jrc3BhY2Uucm9vdFBhdGgsXG4gICAgZW52LFxuICAgIHNoZWxsOiB0eXBlb2Ygd29ya3NwYWNlLnNoZWxsID09PSAnc3RyaW5nJyAmJiB3b3Jrc3BhY2Uuc2hlbGwgPyB3b3Jrc3BhY2Uuc2hlbGwgOiB0cnVlLFxuICAgIC8vIGZvciBub24td2luZG93czogcnVuIGluIGRldGFjaGVkIG1vZGUgc28gdGhlIHByb2Nlc3Mgd2lsbCBiZSB0aGUgZ3JvdXAgbGVhZGVyIGFuZCBhbnkgc3Vic2VxdWVudCBwcm9jZXNzIHNwYXduZWRcbiAgICAvLyB3aXRoaW4gY2FuIGJlIGxhdGVyIGtpbGxlZCBhcyBhIGdyb3VwIHRvIHByZXZlbnQgb3JwaGFuIHByb2Nlc3Nlcy5cbiAgICAvLyBzZWUgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jaGlsZF9wcm9jZXNzLmh0bWwjY2hpbGRfcHJvY2Vzc19vcHRpb25zX2RldGFjaGVkXG4gICAgZGV0YWNoZWQ6IHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicsXG4gIH07XG5cbiAgaWYgKHdvcmtzcGFjZS5kZWJ1Zykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coYHNwYXduaW5nIHByb2Nlc3Mgd2l0aCBjb21tYW5kPSR7cnVudGltZUV4ZWN1dGFibGUuam9pbignICcpfWAsICdvcHRpb25zOicsIHNwYXduT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gc3Bhd24ocnVudGltZUV4ZWN1dGFibGUuam9pbignICcpLCBbXSwgc3Bhd25PcHRpb25zKTtcbn07XG4iXX0=